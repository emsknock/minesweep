import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

import minesweep.dao.ImportExport;
import minesweep.game.BoardLogic;
import minesweep.game.Square;

public class ImportExportTest {

    private static byte[] sampleSerialisedGame = {
        0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x41,0x41,0x42,0x41,0x41,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x41,0x30,0x02,0x30,0x01,(byte) 0xFF,0x40,0x40,0x40,0x40,0x41,0x41,0x41,0x40,0x40,0x40,0x40,0x41,0x41,0x42,0x41,0x41,(byte) 0xFF,0x40,0x41,0x41,0x41,0x41,0x10,0x41,0x40,0x40,0x41,0x41,0x41,0x40,0x40,0x40,0x40,(byte) 0xFF,0x40,0x41,0x30,0x41,0x41,0x42,0x42,0x41,0x41,0x42,0x11,0x41,0x40,0x41,0x41,0x41,(byte) 0xFF,0x40,0x41,0x41,0x41,0x40,0x41,0x10,0x01,0x01,0x11,0x42,0x41,0x40,0x41,0x10,0x01,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x41,0x41,0x41,0x41,0x41,0x41,0x40,0x41,0x42,0x42,0x41,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x41,0x10,0x41,0x40,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x41,0x41,0x41,0x40,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x41,0x41,0x41,0x40,0x40,0x40,0x40,0x40,0x40,0x40,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x41,0x10,0x42,0x41,0x41,0x40,0x40,0x40,0x40,0x40,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x41,0x01,0x02,0x10,0x41,0x40,0x40,0x40,0x40,0x40,(byte) 0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x41,0x01,0x02,0x01,0x41,0x40,0x40,0x40,0x40,0x40,(byte) 0xFF,0x40,0x41,0x41,0x41,0x40,0x40,0x41,0x11,0x02,0x01,0x41,0x41,0x41,0x41,0x41,0x41,(byte) 0xFF,0x40,0x41,0x10,0x41,0x40,0x40,0x41,0x02,0x11,0x01,0x01,0x10,0x01,0x01,0x10,0x01,(byte) 0xFF,0x01
    };

    private BoardLogic sampleGame;
    @Before
    public void loadSampleGame() {
        sampleGame = new BoardLogic(16, 16, 16, 1L);
        sampleGame.guess(0, 0);
        sampleGame.toggleFlag(5, 2);
        sampleGame.toggleFlag(2, 12);
        sampleGame.toggleFlag(2, 14);
    }

    @Test
    public void serialisingSampleGameReturnsCorrectBytes() {
        assertArrayEquals(sampleSerialisedGame, ImportExport.serialiseGame(sampleGame));
    }

    @Test
    public void deserialisingSampleGameReturnsCorrectBoard() {

        BoardLogic deserialised = ImportExport.deserialiseGame(sampleSerialisedGame);

        Square[][] deserialisedGrid = deserialised.getRawGrid();
        Square[][] sampleGrid = sampleGame.getRawGrid();
        for (int rowIdx = 0; rowIdx < deserialised.getBoardHeight(); rowIdx++) {
            assertArrayEquals(sampleGrid, deserialisedGrid);
        }

        assertEquals(sampleGame.getGuessCount(), deserialised.getGuessCount());
        assertEquals(sampleGame.getFlagCount(), deserialised.getFlagCount());

    }

}
